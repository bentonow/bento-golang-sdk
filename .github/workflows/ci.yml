name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.18', '1.19', '1.20', '1.21']

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: go.sum

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

  generate-release:
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Check for version bump
        id: version_check
        run: |
          if git log -1 --pretty=%B | grep -q "chore: bump version"; then
            echo "is_version_bump=true" >> $GITHUB_OUTPUT
            echo "VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          else
            echo "is_version_bump=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate Release Notes
        if: steps.version_check.outputs.is_version_bump == 'true'
        id: release_notes
        uses: actions/github-script@v6
        with:
          script: |
            const generateNotes = require('./.github/scripts/generate-release-notes.js')
            const notes = await generateNotes({github, context})
            return notes

      - name: Create Release
        if: steps.version_check.outputs.is_version_bump == 'true'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_check.outputs.VERSION }}
          name: Release ${{ steps.version_check.outputs.VERSION }}
          body: ${{ steps.release_notes.outputs.result }}
          draft: false
          prerelease: false